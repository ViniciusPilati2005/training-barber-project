/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/IUsBRHgk1rp
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */
import { Label } from "@/components/ui/label";
import { Checkbox } from "@/components/ui/checkbox";
import { Button } from "@/components/ui/button";
import { Form, Formik } from "formik";
import { z } from "zod";
import { toFormikValidationSchema } from "zod-formik-adapter";
import { useMutation } from "@tanstack/react-query";
import { Field } from "./ui/field";
import { ErrorMessage } from "./ui/error-message";
import {
  AppleIcon,
  ChromeIcon,
  FacebookIcon,
  LogInIcon,
  TwitterIcon,
} from "lucide-react";
import { signInWithEmailAndPassword } from "firebase/auth";
import { auth } from "@/utils/firebase";
import { useNavigate } from "@tanstack/react-router";
import { useState } from "react";

const User = z.object({
  email: z.string().email({ message: "Email invÃ¡lido" }),
  password: z.string().min(6, "Senha deve conter no minimo 6 caracteres"),
});

const useLogic = () => {
  const navigate = useNavigate({ from: "/" });
  const [phoneNumberValue, setPhoneNumberValue] = useState("");
  const [cpfValue, setCpfValue] = useState("");

  const { mutate: login } = useMutation({
    mutationFn: ({ email, password }: z.infer<typeof User>) => {
      return signInWithEmailAndPassword(auth, email, password);
    },
    onSuccess: () => {
      navigate({ to: "/dashboard" });
    },
  });

  const handleOnPhoneNumberChange = (
    e: React.ChangeEvent<HTMLInputElement>
  ) => {
    const filterNumbers = e.target.value.replace(/\D/g, "");

    const numbersDDD = filterNumbers.slice(0, 2);
    const numberPart2 = filterNumbers.slice(2, 7);
    const numberPart3 = filterNumbers.slice(7, 11);

    let phoneFormat = "";

    if (numbersDDD) {
      phoneFormat += `(${numbersDDD}`;
    }
    if (numberPart2) {
      phoneFormat += `) ${numberPart2}`;
    }
    if (numberPart3) {
      phoneFormat += `-${numberPart3}`;
    }

    setPhoneNumberValue(phoneFormat);
  };

  const handleOnCpfChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const filterNumbers = e.target.value.replace(/\D/g, "");

    const threeInitialNumbers = filterNumbers.slice(0, 3);
    const threeSecondNumbers = filterNumbers.slice(3, 6);
    const threeFinallyNumbers = filterNumbers.slice(6, 9);
    const twoEndNumbers = filterNumbers.slice(9, 11);

    let CpfFormat = "";

    if (threeInitialNumbers) {
      CpfFormat += `${threeInitialNumbers}`;
    }
    if (threeSecondNumbers) {
      CpfFormat += `.${threeSecondNumbers}`;
    }
    if (threeFinallyNumbers) {
      CpfFormat += `.${threeFinallyNumbers}`;
    }
    if (twoEndNumbers) {
      CpfFormat += `-${twoEndNumbers}`;
    }

    setCpfValue(CpfFormat);
  };

  return {
    login,
    phoneNumberValue,
    handleOnPhoneNumberChange,
    handleOnCpfChange,
    cpfValue,
  };
};

export function LoginPage() {
  const {
    login,
    cpfValue,
    handleOnPhoneNumberChange,
    handleOnCpfChange,
    phoneNumberValue,
  } = useLogic();

  return (
    <div className="flex min-h-screen">
      <div className="flex flex-col justify-center w-full max-w-md p-8 space-y-6 bg-white">
        <div className="flex items-start justify-center space-x-2">
          <LogInIcon className="w-8 h-8 text-blue-600" />
          <h1 className="text-2xl font-bold text-gray-900">Hope Ui</h1>
        </div>
        <h2 className="text-3xl font-semibold text-center text-gray-900">
          Sign In
        </h2>
        <p className="text-center text-gray-600">Sign in to stay connected.</p>
        <Formik
          validationSchema={toFormikValidationSchema(User)}
          initialValues={{ email: "", password: "" }}
          onSubmit={login}
        >
          {({ isValid }) => (
            <Form className="space-y-4">
              <div>
                <Label
                  htmlFor="email"
                  className="block text-sm font-medium text-gray-700"
                >
                  Email
                </Label>
                <Field
                  name="email"
                  id="email"
                  type="email"
                  placeholder="user@email.com"
                  className="w-full mt-1"
                />
                <ErrorMessage name="email" />
              </div>
              <div>
                <Label
                  htmlFor="password"
                  className="block text-sm font-medium text-gray-700"
                >
                  Password
                </Label>
                <Field
                  name="password"
                  id="password"
                  type="password"
                  placeholder="******"
                  className="w-full mt-1"
                />
                <ErrorMessage name="password" />

                <Label
                  htmlFor="phone"
                  className="block text-sm font-medium text-gray-700"
                >
                  Phone Number
                </Label>
                <Field
                  name="phone"
                  id="phone"
                  value={phoneNumberValue}
                  onChange={handleOnPhoneNumberChange}
                  placeholder="Phone Number"
                  className="w-full mt-1"
                />
                <Label
                  htmlFor="cpf"
                  className="block text-sm font-medium text-gray-700"
                >
                  CPF
                </Label>
                <Field
                  name="cpf"
                  id="cpf"
                  value={cpfValue}
                  onChange={handleOnCpfChange}
                  placeholder="xxxxxxxxxxx"
                  className="w-full mt-1"
                />

                <Label
                  htmlFor="cpnj"
                  className="block text-sm font-medium text-gray-700"
                >
                  CNPJ
                </Label>
                <Field
                  name="cnpj"
                  id="cnpj"
                  // value={value}
                  // onChange={}
                  placeholder="xxxxxxxxxxxxxx"
                  className="w-full mt-1"
                />
              </div>
              <div className="flex items-center justify-between">
                <div className="flex items-center">
                  <Checkbox id="remember" />
                  <Label
                    htmlFor="remember"
                    className="ml-2 text-sm text-gray-600"
                  >
                    Remember me?
                  </Label>
                </div>
                <a href="#" className="text-sm text-blue-600">
                  Forgot Password
                </a>
              </div>
              <Button
                type="submit"
                className="w-full bg-blue-600 text-white"
                disabled={!isValid}
              >
                Sign In
              </Button>
            </Form>
          )}
        </Formik>
        <div className="text-center text-gray-600">
          or sign in with other accounts?
        </div>
        <div className="flex justify-center space-x-4">
          <Button variant="ghost" className="p-2">
            <ChromeIcon className="w-6 h-6" />
          </Button>
          <Button variant="ghost" className="p-2">
            <FacebookIcon className="w-6 h-6" />
          </Button>
          <Button variant="ghost" className="p-2">
            <TwitterIcon className="w-6 h-6" />
          </Button>
          <Button variant="ghost" className="p-2">
            <AppleIcon className="w-6 h-6" />
          </Button>
        </div>
        <div className="text-center text-gray-600">
          Don't have an account?{" "}
          <a href="#" className="text-blue-600">
            Click here to sign up.
          </a>
        </div>
      </div>
      <div className="hidden w-full bg-blue-700 lg:block">
        <div className="flex items-center justify-center h-full">
          <div className="w-full h-full bg-gradient-to-b from-blue-600 to-blue-800" />
        </div>
      </div>
    </div>
  );
}
